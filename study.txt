1. Node.js설치 https://nodejs.org/ko
2. 터미널(명령어창) 열고 install: npm install -g @vue/cli
-------------------------------------------------------------------------------

# 1. D 드라이브로 이동
D:

# 2. 폴더 생성 (이미 있으면 생략 가능)
mkdir vue-projects

# 3. 생성한 폴더로 이동
cd real-estate-site

# 4. 여기서 Vue 프로젝트 생성 시작!
npm create vue@latest

# 5. 서버실행 
npm run dev

# 6. 기본 폴더 구조 이해
src/
components/ : 화면 조각들을 모아두는 폴더
views/ : 페이지 단위 컴포넌트
router/ : 페이지 이동(라우터) 설정
store/ : 전역 데이터 관리(Vuex)
public/
index.html 파일 (Vue 앱이 여기에 삽입됨)

-------------------------------------------------------------------------------
📚 2단계: Bootstrap-Vue를 이용한 UI 개발과 반응형 레이아웃
2-1. Bootstrap-Vue란?
Bootstrap은 세계에서 가장 인기있는 CSS 프레임워크이고,
Bootstrap-Vue는 이 Bootstrap을 Vue 컴포넌트 스타일로 편하게 쓸 수 있게 해주는 라이브러리입니다.

쉽게 말하면:
버튼, 카드, 네비게이션 바 등을
"HTML+CSS" 몰라도
"태그"만 써서 바로 쓸 수 있게 해줍니다.

2-2. 설치 방법
1. 터미널에서 설치 npm install bootstrap bootstrap-vue
2. main.js 세팅 src/main.js 파일 열고, 다음 코드 추가:
import 'bootstrap/dist/css/bootstrap.css'
import 'bootstrap-vue/dist/bootstrap-vue.css'

import { createApp } from 'vue'
import App from './App.vue'

// Bootstrap-Vue 3
import BootstrapVue3 from 'bootstrap-vue-3'

const app = createApp(App)
app.use(BootstrapVue3)
app.mount('#app')
✅ 꼭 bootstrap-vue-3 버전 사용! (Vue 3에 맞는 버전이에요)

-------------------------------------------------------------------------------
📚 3단계: v-bind, v-for, v-if 완전 정복
1. v-bind란? (데이터 → 속성 연결)
HTML 속성(attribute)에 Vue 데이터(data)를 연결할 때 사용합니다.
즉, "JS 변수를 HTML에 심어준다" 생각하면 됩니다.
<img v-bind:src="imageUrl"> //v-bind: 를 쓰고 오른쪽에는 Vue 변수를 연결합니다.
축약형: <img :src="imageUrl">


2. v-for란? (목록 반복)
배열(Array)을 반복해서 HTML로 그릴 때 사용합니다.
즉, "데이터 배열을 HTML로 반복 렌더링" 하는 기능입니다.
<div v-for="item in items" :key="item.id">
  {{ item.name }}
</div>
v-for="item in items" : items 배열을 돌면서 하나씩 item에 담는다.
:key는 Vue가 성능 최적화를 위해 꼭 필요합니다. (id나 index 사용)
💡v-for 붙이는 곳부터 반복됨!


3. v-if란? (조건부 렌더링)
어떤 요소를 "보여줄지 말지" 를 Vue가 판단해서 렌더링합니다.
즉, "if문처럼 조건 걸기" 라고 보면 됩니다.
<div v-if="조건">
  조건이 참일 때만 이 div가 보입니다!
</div>

  문법	         설명	                       특징
-------------------------------------------------------------
v-bind	HTML 속성에 Vue 변수 연결	      축약형 :
v-for 	배열을 반복 렌더링	            꼭 :key 추가
v-if	  조건에 따라 요소 보여주기	       v-else, v-else-if도 가능
-------------------------------------------------------------


--------------------------------------------------------------------------------

📚 4단계: HTML 컴포넌트화 하기 (부품처럼 쪼개기)
1. 컴포넌트란? 컴포넌트(Component) = 화면을 작은 조각으로 나눈 파일입니다.
✔️ 한마디로, "큰 화면을 작은 부품 단위로 나눈다" → 개발할 때 훨씬 편하고 재사용도 쉽습니다!


2단계: 새 컴포넌트 파일 만들기
HouseItem.vue 라는 파일을 새로 만듭니다.
<template>
  <b-card title="매물" class="mb-3">ㅍ
    <p>🏠 {{ house.name }} - {{ house.price }}만원</p>
  </b-card>
</template>

<script setup>
defineProps(['house'])
</script>

house라는 데이터를 부모가 내려줄 것이라고 선언합니다.
defineProps()로 받아옵니다.

-------------------------------------------------------------------------------

📚 5단계: Props 사용하기
1. Props란 무엇인가?
Props (Properties) 는 부모 컴포넌트 → 자식 컴포넌트로 데이터를 전달하는 방법입니다.
✔️ 쉽게 말하면: 부모가 "야, 이 값 가져가서 써!" 자식이 "넵! 잘 받을게요!"
→ 데이터 흐름은 "항상 부모 → 자식" 방향입니다.


2. 왜 Props가 필요한가?
컴포넌트는 독립적입니다. 그냥 만들기만 하면, 아무것도 모릅니다.
매물 이름? 가격? → 자식은 모름
부모가 props로 알려줘야 함

✅ Props를 써야 컴포넌트가 동적인 데이터를 사용할 수 있습니다.


3. Props 기본 사용법
부모에서 데이터 보내기
<HouseItem :house="house" />
:는 v-bind 축약형입니다.
house 객체 하나를 보내주는 겁니다.

<script setup>
defineProps(['house'])
</script>
defineProps()로 props를 받습니다.
Vue 3에서는 script setup 안에서 간단하게 씁니다.

✅ 부모가 house를 내려주고,
✅ 자식은 house.name, house.price를 출력합니다.
-------------------------------------------------------------------------------

📚 6단계: Vue Router 설치와 라우터 개념
1. Vue Router란?
Vue Router는 Vue 애플리케이션에서 페이지 이동을 담당하는 라이브러리입니다.
✔️ 쉽게 말하면: 한 사이트 안에서 여러 "화면(페이지)"을 왔다갔다 하는 기능!

📖 예를 들면:
/ : 홈 화면
/list : 매물 목록
/detail : 매물 상세보기
/about : 회사 소개
→ URL 주소에 따라 화면을 바꿔줍니다.


2. Vue Router 설치하기
npm install vue-router@4


3. Vue Router 기본 설정
1단계: router 폴더 만들기
import { createRouter, createWebHistory } from 'vue-router'
import HomeView from '../views/HomeView.vue'
import ListView from '../views/ListView.vue'

const routes = [
  {
    path: '/',
    name: 'Home',
    component: HomeView
  },
  {
    path: '/list',
    name: 'List',
    component: ListView
  }
]

const router = createRouter({
  history: createWebHistory(),
  routes
})

export default router

✅ 요약:
경로(path)와 연결할 컴포넌트(component)를 설정합니다.
URL과 화면을 매칭시키는 규칙표!

2단계: main.js에 라우터 연결하기
import { createApp } from 'vue'
import App from './App.vue'
import router from './router'

const app = createApp(App)
app.use(router)
app.mount('#app')
✅ 꼭 app.use(router)를 해줘야 라우터가 적용됩니다.


4. 라우터 화면에 표시하기
App.vue 수정 (화면 출력할 자리 만들기)
<template>
  <div class="container">
    <RouterView />
  </div>
</template>

<script setup>
import { RouterView } from 'vue-router'
</script>
✅ RouterView가 들어간 위치에,
✅ URL에 맞는 컴포넌트가 렌더링됩니다!
------------------------------------------------------------------------------

📚 7단계: 라이프사이클 함수 사용하는 법
1. 라이프사이클(Lifecycle)이란? Vue 컴포넌트는 태어나고, 화면에 나타나고, 사라지는 **"생애 주기"**를 가지고 있습니다.

단계	       비유	   설명
----------------------------------------------
태어남	       출생	   컴포넌트가 메모리에 생성됨
화면에 나타남	성장	브라우저 화면에 보여짐
업데이트됨	    변화	데이터 변경으로 다시 그려짐
사라짐	       죽음	   메모리에서 삭제됨
----------------------------------------------
✔️ Vue에서는 이 단계마다 자동으로 실행되는 함수를 등록할 수 있습니다.
(이걸 라이프사이클 훅이라고 부릅니다.)

2. 대표적인 라이프사이클 함수 
함수 이름	      설명	                                   타이밍
onMounted	    컴포넌트가 화면에 나타난 후 실행	         DOM 렌더 완료 후
onUnmounted	    컴포넌트가 화면에서 사라질 때 실행	         메모리 정리할 때
onUpdated	    데이터가 바뀌고 화면이 다시 그려진 후 실행	  re-render 이후
onBeforeMount,  각각 "나타나기 직전", "사라지기 직전"	     고급용
onBeforeUnmount	
가장 많이 쓰는 것은 onMounted입니다. (데이터 로딩, 초기 설정, API 호출 등)

3. 기본 사용법 (Vue 3 Composition API)
1) onMounted 사용 예제⭐
<template>
  <div>
    <h2>라이프사이클 테스트 컴포넌트</h2>
  </div>
</template>

<script setup>
import { onMounted } from 'vue'

onMounted(() => {
  console.log('컴포넌트가 화면에 나타났습니다!')
})
</script>
✅ 결과:화면에 컴포넌트가 뜨는 순간 **브라우저 콘솔(console)**에 메시지가 찍힙니다!


2) onUnmounted 사용 예제
import { onUnmounted } from 'vue'

onUnmounted(() => {
  console.log('컴포넌트가 화면에서 사라졌습니다!')
})
✅ 컴포넌트가 제거될 때 (페이지 이동 등)
✅ 메모리 정리 코드 등을 넣을 때 유용합니다.


4. 실전 예시: 데이터 불러오기
매물이 뜨자마자 서버에서 데이터 가져오고 싶다면?
import { onMounted } from 'vue'
import axios from 'axios'

onMounted(async () => {
  const response = await axios.get('https://example.com/api/houses')
  console.log(response.data)
})
컴포넌트가 딱 화면에 등장하는 순간,
서버에 API 요청을 보내고,
데이터를 받아오는 식으로 사용합니다.

🔥 라이프사이클 함수 흐름 정리
컴포넌트 생성 전 (onBeforeMount)
컴포넌트 생성 후 (onMounted) ← 가장 많이 사용!
컴포넌트 업데이트 후 (onUpdated)
컴포넌트 소멸 전 (onBeforeUnmount)
컴포넌트 소멸 후 (onUnmounted)
✅ 필요에 따라 맞는 타이밍에 코드를 넣으면 됩니다.

------------------------------------------------------------------------------------------
📚 8단계: methods, computed 쓰는 법
1. methods란?
methods는 "버튼 클릭" 같은 이벤트가 일어났을 때 실행할 함수를 만든다고 생각하면 돼.

예를 들어:
<button @click="plus">+ 1</button>

<script setup>
function plus() {
  console.log('버튼 눌렀다!')
}
</script>
✔️ 버튼을 누르면 plus() 함수가 실행되는 구조야.
(참고: @click="plus" 는 v-on:click="plus" 의 축약형이야.)

2. computed란?
computed는 "자동으로 계산되는 값"을 만드는 거야.

쉽게 말해서:
데이터를 기반으로 자동으로 계산된 결과값을 만들고 싶을 때 써.

예를 들어:
<script setup>
import { ref, computed } from 'vue'
const price = ref(10000)

const doublePrice = computed(() => {
  return price.value * 2
})
</script> 

<div>
  <p>원래 가격: {{ price }}</p>
  <p>2배 가격: {{ doublePrice }}</p>
</div>
✅ price가 바뀌면, doublePrice도 자동으로 다시 계산돼!

🧠 정리 습관
템플릿 안: house.name
스크립트 안: props.house.name
(➡️ 이렇게 자동으로 분리해서 생각하면 됨)

--------------------------------------------------------------------------------

📚 9단계: 라우터를 이용한 페이지 나누기
1. 라우터 페이지 나눈다는 게 뭐야?
한 프로젝트 안에 여러 개 페이지를 만들어서, 주소(URL)마다 다른 화면이 나오게 하는 것!

쉽게 말하면:
URL 주소	 화면
/	        홈 화면
/list	    매물 목록 화면
/special	특가 매물 화면
➡️ 이런 걸 라우터로 설정하는 거야!

router/index.js 추가하기
{
    path: '/special',
    name: 'Special',
    component: SpecialView
}

✅ 여기서:
path: URL 주소
name: 나중에 프로그램 안에서 쓸 이름
component: 이 URL로 왔을 때 보여줄 컴포넌트


App.vue 수정하기 (RouterView 넣기)
<template>
  <div class="container mt-5">
    <h1>초간단 부동산 사이트</h1>

    <nav>
      <router-link to="/">Home</router-link> |
      <router-link to="/list">매물 목록</router-link> |
      <router-link to="/special">특가 매물</router-link>
    </nav>

    <RouterView />
  </div>
</template>

<script setup>
import { RouterView, RouterLink } from 'vue-router'
</script>
✅ RouterView: 화면이 바뀌는 자리
✅ RouterLink: 페이지 이동 버튼

------------------------------------------------------------------------

📚 10단계: URL 파라미터를 추가한 라우터 만들기
1. URL 파라미터가 뭐야?
주소(URL) 안에 "값"을 같이 보내는 거야.

예를 들면:
URL	        의미
/list	    매물 목록 전체 보기
/detail/1	ID가 1번인 매물 상세보기
/detail/2	ID가 2번인 매물 상세보기
즉, 어떤 매물을 클릭했는지 구별할 때 이걸 써.

index.js에 { path: '/detail/:id', name: 'Detail', component: DetailView }  추가!
✅ 여기서 :id 이 부분이
✅ "파라미터 자리" 라는 뜻이야!

-------------------------------------------------------------------------

📚 11단계: Named Routes & Navigation Guard
1. Named Routes (이름 붙인 라우트)
🤔 이게 뭐냐면? 각 라우트에 name을 지정해서, 경로(/url) 말고 name으로 이동하는 방법이야!
{
  path: '/detail/:id',
  name: 'Detail',
  component: DetailView
}
이렇게 name을 Detail로 주면,

이제 이동할 때 이런 식으로 쓸 수 있어:
<router-link :to="{ name: 'Detail', params: { id: 3 } }">
  3번 매물 보기
</router-link>

또는 자바스크립트로 이동할 때도 이렇게:
router.push({ name: 'Detail', params: { id: 3 } })

✅ 왜 좋냐?
경로가 바뀌어도 name은 안 바뀌니까 코드 유지보수에 유리함
복잡한 URL 구성할 때 가독성 좋아짐


2. Navigation Guard (페이지 이동 막기 or 체크)
🤔 이건 뭐냐면? 페이지 이동 전에 "잠깐! 조건 좀 확인하자" 라고 가로채는 함수야.

예:
로그인 안 했으면 특정 페이지 막기
폼 작성 안 했으면 페이지 이동 막기

✅ 기본 구조 (컴포넌트 안에서)
<script setup>
import { onBeforeRouteLeave } from 'vue-router'

onBeforeRouteLeave((to, from, next) => {
  const answer = confirm('정말 페이지를 나가시겠습니까?')
  if (answer) {
    next() // 이동 허용
  } else {
    next(false) // 이동 막기
  }
})
</script>
onBeforeRouteLeave: 지금 컴포넌트에서 나가기 직전에 호출됨
next()를 호출해야 이동이 실제로 이루어짐

🔥 예제 1: Named Route로 이동
ListView.vue 
<router-link :to="{ name: 'Detail', params: { id: house.id } }">
  {{ house.name }} 상세보기
</router-link>

router/index.js 
{
  path: '/detail/:id',
  name: 'Detail',
  component: DetailView
}

🔥 예제 2: Navigation Guard로 "이탈 방지"
DetailView.vue
<script setup>
import { onBeforeRouteLeave } from 'vue-router'

onBeforeRouteLeave((to, from, next) => {
  const confirmLeave = confirm('진짜 나갈래? 데이터 날아갈 수도 있어!')
  if (confirmLeave) {
    next()
  } else {
    next(false)
  }
})
</script>
✅ 이거 해두면 뒤로가기 눌렀을 때 확인창이 뜨고,
✅ "아니" 누르면 페이지 못 나감!

------------------------------------------------------------------------------

📚 12단계: GitHub Pages에 Vue 프로젝트 배포하기
1. GitHub Pages가 뭐야?
GitHub가 무료로 제공하는 "웹사이트 호스팅 서비스"야.

✅ 쉽게 말하면:
코드를 GitHub에 올리기만 하면,
자동으로 URL이 생겨서
누구나 인터넷에서 네 사이트를 볼 수 있게 만들어주는 거야.

3. GitHub 저장소(repo) 만들기
GitHub 접속
새 저장소(New Repository) 만들기
저장소 이름은 편하게 예를 들면 real-estate-site
Private/Public은 상관없음 (공개하고 싶으면 Public)
저장소 만들기 버튼 클릭

4. 프로젝트 세팅 변경
Vue CLI 프로젝트를 GitHub Pages에 올리려면 build 설정을 살짝 바꿔야 해.

vue.config.js 파일을 프로젝트 루트(최상단)에 만들어:
// vue.config.js
module.exports = {
  publicPath: '/real-estate-site/'  // 여기 저장소 이름으로
}
✅ 주의: / 꼭 붙이고, 저장소 이름 정확히 입력해야 해.

